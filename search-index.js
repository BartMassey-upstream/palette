var searchIndex = JSON.parse('{\
"palette":{"doc":"A library that makes linear color calculations and â€¦","t":[3,8,8,16,16,8,8,8,8,8,8,8,3,6,3,6,3,6,8,16,3,6,8,3,3,6,3,6,3,6,3,3,6,6,8,3,3,6,3,6,3,24,8,8,3,8,16,16,16,16,16,16,8,8,16,24,3,6,3,6,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,11,11,11,11,11,11,10,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,12,12,12,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,12,12,12,12,12,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,8,8,16,13,13,4,3,13,13,13,13,13,13,13,4,3,3,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,13,3,4,8,13,13,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,8,8,8,8,3,8,8,11,11,11,11,11,11,11,11,10,10,11,10,11,10,11,11,11,10,11,10,11,11,8,10,0,10,0,0,0,3,3,3,8,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,8,8,8,10,10,11,11,10,11,11,10,10,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,6,6,6,6,3,8,6,6,6,16,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,4,6,6,13,6,6,3,13,8,16,3,8,8,8,6,16,6,6,16,16,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,12,0,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alpha","Blend","Clamp","Color","Color","ColorDifference","Component","ComponentWise","FloatComponent","FromComponent","FromF64","GetHue","Hsl","Hsla","Hsluv","Hsluva","Hsv","Hsva","Hue","Hue","Hwb","Hwba","IntoComponent","Lab","LabHue","Laba","Lch","Lcha","Lchuv","Lchuva","Luv","LuvHue","Luva","Mat3","Mix","Oklab","OklabHue","Oklaba","Oklch","Oklcha","Packed","Pixel","RelativeContrast","RgbChannels","RgbHue","Saturate","Scalar","Scalar","Scalar","Scalar","Scalar","Scalar","Shade","WithAlpha","WithAlpha","WithAlpha","Xyz","Xyza","Yxy","Yxya","a","a","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","alpha","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","b","b","blackness","blend","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_order","chroma","chroma","chroma","chromatic_adaptation","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color","combine_rgb","component_wise","component_wise","component_wise","component_wise","component_wise","component_wise","component_wise","component_wise_self","component_wise_self","component_wise_self","component_wise_self","component_wise_self","component_wise_self","component_wise_self","contrast_ratio","convert","darken","darken_fixed","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","deref","deref_mut","desaturate","desaturate_fixed","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","encoding","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_component","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_degrees","from_degrees","from_degrees","from_degrees","from_encoding","from_encoding","from_f64","from_format","from_format","from_linear","from_linear","from_premultiplied","from_premultiplied","from_radians","from_radians","from_radians","from_radians","from_u32","get_color_difference","get_color_difference","get_color_difference","get_color_difference","get_color_difference","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","gradient","has_enhanced_contrast_large_text","has_enhanced_contrast_large_text","has_enhanced_contrast_text","has_enhanced_contrast_text","has_min_contrast_graphics","has_min_contrast_graphics","has_min_contrast_large_text","has_min_contrast_large_text","has_min_contrast_text","has_min_contrast_text","hue","hue","hue","hue","hue","hue","hue","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_component","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_encoding","into_encoding","into_format","into_format","into_linear","into_linear","into_premultiplied","into_premultiplied","into_u32","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","l","l","l","l","l","l","l","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lightness","luma","luma","max_a","max_a","max_alpha","max_b","max_b","max_blackness","max_chroma","max_chroma","max_chroma","max_extended_chroma","max_intensity","max_l","max_l","max_l","max_l","max_l","max_l","max_l","max_lightness","max_luma","max_saturation","max_saturation","max_saturation","max_u","max_v","max_value","max_whiteness","max_x","max_x","max_y","max_y","max_z","min_a","min_a","min_alpha","min_b","min_b","min_blackness","min_chroma","min_chroma","min_chroma","min_l","min_l","min_l","min_l","min_l","min_l","min_l","min_lightness","min_luma","min_saturation","min_saturation","min_saturation","min_u","min_v","min_value","min_whiteness","min_x","min_x","min_y","min_y","min_z","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","named","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","opaque","opaque","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","rgb","saturate","saturate","saturate","saturate","saturate","saturate","saturate","saturate","saturate_fixed","saturate_fixed","saturate_fixed","saturate_fixed","saturate_fixed","saturate_fixed","saturate_fixed","saturate_fixed","saturation","saturation","saturation","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","split","split","split","split","split","split","split","split","split","split","split","split","split","split","split_rgb","standard","standard","standard","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_degrees","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_positive_degrees","to_positive_degrees","to_positive_degrees","to_positive_degrees","to_positive_radians","to_positive_radians","to_positive_radians","to_positive_radians","to_radians","to_radians","to_radians","to_radians","to_raw_degrees","to_raw_degrees","to_raw_degrees","to_raw_degrees","to_raw_radians","to_raw_radians","to_raw_radians","to_raw_radians","transparent","transparent","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","v","value","white_point","white_point","white_point","white_point","white_point","white_point","white_point","white_point","whiteness","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_hue","with_hue","with_hue","with_hue","with_hue","with_hue","with_hue","with_hue","with_hue","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","x","x","y","y","z","Add","Blend","BlendFunction","Color","DestinationAlpha","DestinationColor","Equation","Equations","Max","Min","One","OneMinusDestinationAlpha","OneMinusDestinationColor","OneMinusSourceAlpha","OneMinusSourceColor","Parameter","Parameters","PreAlpha","ReverseSubtract","SourceAlpha","SourceColor","Subtract","Zero","abs_diff_eq","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","add","add","add_assign","add_assign","alpha","alpha_equation","alpha_parameters","apply_to","apply_to","as_mut","as_ref","atop","atop","atop","blend","blend","blend","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","burn","burn","burn","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","color","color_equation","color_parameters","component_wise","component_wise_self","darken","darken","darken","default","default_epsilon","default_max_relative","default_max_ulps","deref","deref_mut","destination","difference","difference","difference","div","div","div_assign","div_assign","dodge","dodge","dodge","eq","eq","eq","eq","eq","exclusion","exclusion","exclusion","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_equations","from_parameters","from_premultiplied","from_premultiplied","hard_light","hard_light","hard_light","inside","inside","inside","into","into","into","into","into","into_color","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_premultiplied","into_premultiplied","lighten","lighten","lighten","mix","mul","mul","mul_assign","mul_assign","multiply","multiply","multiply","ne","ne","outside","outside","outside","over","over","over","overlay","overlay","overlay","plus","plus","plus","relative_eq","screen","screen","screen","soft_light","soft_light","soft_light","source","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","type_id","ulps_eq","xor","xor","xor","AdaptFrom","AdaptInto","Bradford","ConeResponseMatrices","Method","TransformMatrix","VonKries","XyzScaling","adapt_from","adapt_from_using","adapt_into","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","from","from","generate_transform_matrix","get_cone_response","get_cone_response","into","into","into_color","into_color","into_color_unclamped","into_color_unclamped","inv_ma","ma","try_from","try_from","try_into","try_into","try_into_color","try_into_color","type_id","type_id","FromColor","FromColorUnclamped","IntoColor","IntoColorUnclamped","OutOfBounds","TryFromColor","TryIntoColor","adapt_into_using","borrow","borrow_mut","color","description","fmt","fmt","from","from_color","from_color_unclamped","into","into_color","into_color","into_color_unclamped","into_color_unclamped","to_string","try_from","try_from_color","try_into","try_into_color","try_into_color","type_id","TransferFn","from_linear","gamma","into_linear","linear","pixel","srgb","F2p2","Gamma","GammaFn","Number","VALUE","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_linear","into","into","into","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_linear","ne","ne","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","Linear","LinearFn","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from_linear","into","into","into_color","into_color","into_color_unclamped","into_color_unclamped","into_linear","ne","to_owned","to_owned","try_from","try_from","try_into","try_into","try_into_color","try_into_color","type_id","type_id","CHANNELS","CHANNELS","CHANNELS","Pixel","RawPixel","RawPixelSized","as_mut_ptr","as_ptr","as_raw","as_raw_mut","channels","from_raw","from_raw_mut","from_raw_parts","from_raw_parts_mut","from_raw_slice","from_raw_slice_mut","into_raw","into_raw_slice","into_raw_slice_mut","Srgb","adapt_into_using","blue","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_linear","green","into","into_color","into_color_unclamped","into_linear","red","to_owned","try_from","try_into","try_into_color","type_id","Float","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","classify","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","nan","neg_infinity","neg_zero","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Gradient","Range","Slice","Take","abs_diff_eq","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default_epsilon","default_max_relative","default_max_ulps","domain","domain","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","get","into","into","into","into","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_iter","named","ne","new","next","next_back","relative_eq","size_hint","slice","slice","take","take","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","ulps_eq","with_domain","INFERNO","MAGMA","PLASMA","VIRIDIS","GammaLuma","GammaLumaa","LinLuma","LinLumaa","Luma","LumaStandard","Lumaa","SrgbLuma","SrgbLumaa","TransferFn","WhitePoint","abs_diff_eq","adapt_from_using","adapt_into_using","add","add","add_assign","add_assign","as_mut","as_ref","borrow","borrow_mut","clamp","clamp_self","clone","clone_into","component_wise","component_wise_self","default","default_epsilon","default_max_relative","default_max_ulps","div","div","div_assign","div_assign","eq","fmt","fmt","fmt","from","from","from_color","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_components","from_encoding","from_format","from_linear","from_premultiplied","get_contrast_ratio","into","into","into_color","into_color_unclamped","into_components","into_encoding","into_format","into_linear","into_premultiplied","is_within_bounds","lighten","lighten_fixed","luma","max_luma","min_luma","mix","mul","mul","mul_assign","mul_assign","new","relative_eq","split","standard","sub","sub","sub_assign","sub_assign","to_owned","try_from","try_from_color","try_into","try_into_color","type_id","ulps_eq","with_alpha","without_alpha","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","from_str","FromHexError","GammaSrgb","GammaSrgba","HexFormatError","LinSrgb","LinSrgba","Packed","ParseIntError","Primaries","Primaries","Rgb","RgbChannels","RgbSpace","RgbStandard","Rgba","Space","Srgb","Srgba","TransferFn","WhitePoint","abs_diff_eq","adapt_from_using","adapt_into_using","adapt_into_using","adapt_into_using","add","add","add_assign","add_assign","as_mut","as_ref","blue","blue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel_order","channels","clamp","clamp_self","clone","clone","clone_into","clone_into","color","combine_rgb","component_wise","component_wise_self","default","default_epsilon","default_max_relative","default_max_ulps","div","div","div_assign","div_assign","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_color","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_components","from_encoding","from_format","from_linear","from_premultiplied","from_str","from_u32","from_u32","get_contrast_ratio","get_hue","green","green","into","into","into","into","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_components","into_encoding","into_format","into_linear","into_premultiplied","into_u32","into_u32","is_within_bounds","lighten","lighten_fixed","max_blue","max_green","max_red","min_blue","min_green","min_red","mix","mul","mul","mul_assign","mul_assign","ne","new","red","red","relative_eq","source","split","split_rgb","standard","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from_color","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","ulps_eq","with_alpha","without_alpha","Abgr","Argb","Bgra","Rgba","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","combine_rgb","combine_rgb","combine_rgb","combine_rgb","from","from","from","from","into","into","into","into","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","split_rgb","split_rgb","split_rgb","split_rgb","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","A","B","C","D50","D50Degree10","D55","D55Degree10","D65","D65Degree10","D75","D75Degree10","E","F11","F2","F7","WhitePoint","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["palettepalette::blendpalette::chromatic_adaptation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::convert","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::encoding","","","","","","","palette::encoding::gamma","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::encoding::linear","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::encoding::pixel","","","","","","","","","","","","","","","","","","","","palette::encoding::srgb","","","","","","","","","","","","","","","","","","","","","","palette::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::gradient","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::gradient::named","","","","palette::luma","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::named","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::rgbpalette::rgb::channels","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::white_pointd":["An alpha component wrapper for colors.","A trait for colors that can be blended together.","A trait for clamping and checking if colors are within â€¦","The core color type. Typically <code>Self</code> for color types â€¦","The opaque color type, without any transparency.","A trait for calculating the color difference between two â€¦","Common trait for color components.","Perform a unary or binary operation on each component of â€¦","Common trait for floating point color components.","Converts from a color component type, while performing â€¦","A trait for infallible conversion from <code>f64</code>. The â€¦","A trait for colors where a hue may be calculated.","HSL color space.","Linear HSL with an alpha component. See the <code>Hsla</code> â€¦","HSLuv color space.","HSLuv with an alpha component. See the <code>Hsluva</code> â€¦","HSV color space.","Linear HSV with an alpha component. See the <code>Hsva</code> â€¦","A trait for colors where the hue can be manipulated â€¦","The kind of hue unit this color space uses.","HWB color space.","Linear HWB with an alpha component. See the <code>Hwba</code> â€¦","Converts into a color component type, while performing â€¦","The CIE L*a*b* (CIELAB) color space.","A hue type for the CIE L*a*b* family of color spaces.","CIE L*a*b* (CIELAB) with an alpha component. See the <code>Laba</code> â€¦","CIE L*C*hÂ°, a polar version of CIE L*a*b*.","CIE L*C*hÂ° with an alpha component. See the <code>Lcha</code> â€¦","CIE L*C*uv hÂ°uv, a polar version of CIE L*u*v*.","CIE L*C*uv hÂ°uv with an alpha component. See the <code>Lchuva</code> â€¦","The CIE L*u*v* (CIELUV) color space.","A hue type for the CIE L*u*v* family of color spaces.","CIE L*u*v* (CIELUV) with an alpha component. See the <code>Luva</code> â€¦","A 9 element array representing a 3x3 matrix.","A trait for linear color interpolation.","The Oklab color space.","A hue type for the Oklab color space.","Oklab with an alpha component. See the <code>Oklaba</code> â€¦","Oklch, a polar version of Oklab.","Oklch with an alpha component. See the <code>Oklcha</code> â€¦","RGBA color packed into a 32-bit unsigned integer. â€¦","","A trait for calculating relative contrast between two â€¦","Splits and combines RGB(A) types with some channel â€¦","A hue type for the RGB family of color spaces.","A trait for colors where the saturation (or chroma) can â€¦","The type of the calculated color difference","The type of the contrast ratio.","The type of the mixing factor.","The type of the lighten/darken modifier.","The type of the (de)saturation modifier.","The scalar type for color components.","The <code>Shade</code> trait allows a color to be lightened or â€¦","A trait for color types that can have or be given â€¦","The color type with transparency applied.","","The CIE 1931 XYZ color space.","CIE 1931 XYZ with an alpha component. See the <code>Xyza</code> â€¦","The CIE 1931 Yxy (xyY)  color space.","CIE 1931 Yxy (xyY) with an alpha component. See the <code>Yxya</code> â€¦","a* goes from red at -128 to green at 127.","a goes from red at -1 to green at 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The transparency component. 0.0 is fully transparent and â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","b* goes from yellow at -128 to blue at 127.","b goes from yellow at -1 to blue at 1.","The blackness of the color. It specifies the amount black â€¦","Color blending and blending equations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The channel ordering for red, green, blue, and alpha â€¦","C* is the colorfulness of the color. Itâ€™s similar to â€¦","C*uv is the colorfulness of the color. Itâ€™s similar to â€¦","C is the colorfulness of the color, from greyscale at 0 â€¦","Convert colors from one reference white point to another","Return a new color where the components have been clamped â€¦","","","","","","","","","","","","","","Clamp the colorâ€™s components to the nearest valid â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The color.","The sRGB color packed into a <code>u32</code>.","Create an RGBA color from a <code>(u8, u8, u8, u8)</code> tuple.","Perform a binary operation on this and an other color.","","","","","","","Perform a unary operation on this color.","","","","","","","Calculate the ratio between two <code>luma</code> values.","Traits for converting between color spaces.","Scale the color towards the minimum lightness by <code>factor</code>, â€¦","Darken the color by <code>amount</code>, a value ranging from <code>0.0</code> to â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Scale the color towards the minimum saturation by <code>factor</code>, â€¦","Increase the saturation by <code>amount</code>, a value ranging from â€¦","","","","","","","","","","","","","","","","","","","","","","","","","Various encoding traits, types and standards.","","","","","","","","","","","","","","","","","","","","","","Floating point traitonverts <code>other</code> into <code>Self</code>, while performing the â€¦","Convert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert from a <code>(L\\\\*, a\\\\*, b\\\\*, alpha)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*uv, hÂ°uv, alpha)</code> tuple.","Convert from a <code>(hue, whiteness, blackness, alpha)</code> tuple.","Convert from a <code>(X, Y, Z, alpha)</code> tuple.","Convert from a <code>(hue, saturation, value, alpha)</code> tuple.","Convert from a <code>(luma, alpha)</code> tuple.","Convert from a <code>(hue, saturation, l, alpha)</code> tuple.","Convert from a <code>(red, green, blue, alpha)</code> tuple.","Convert from u <code>(L\\\\*, u\\\\*, v\\\\*, alpha)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*, hÂ°, alpha)</code> tuple.","Convert from a <code>(L, a, b, alpha)</code> tuple.","Convert from a <code>(L, C, h, alpha)</code> tuple.","Convert from a <code>(hue, saturation, lightness, alpha)</code> tuple.","Convert from a <code>(hue, saturation, lightness)</code> tuple.","Convert from a <code>(hue, saturation, l)</code> tuple.","Convert from a <code>(hue, saturation, value)</code> tuple.","Convert from a <code>(hue, whiteness, blackness)</code> tuple.","Convert from a <code>(L\\\\*, a\\\\*, b\\\\*)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*, hÂ°)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*uv, hÂ°uv)</code> tuple.","Convert from a <code>(L\\\\*, u\\\\*, v\\\\*)</code> tuple.","Convert from a <code>(L, a, b)</code> tuple.","Convert from a <code>(L, C, h)</code> tuple.","Convert from a <code>(X, Y, Z)</code> tuple.","Convert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Create a new hue from degrees.","Create a new hue from degrees.","Create a new hue from degrees.","Create a new hue from degrees.","Convert RGB from a different encoding with transparency.","Convert luminance from a different encoding with â€¦","Creates a value from an <code>f64</code> constant.","Convert from another component type.","Convert from another component type.","Convert linear RGB to non-linear RGB with transparency.","Convert linear luminance to non-linear luminance with â€¦","Convert the color from premultiplied alpha.","","Create a new hue from radians, instead of degrees.","Create a new hue from radians, instead of degrees.","Create a new hue from radians, instead of degrees.","Create a new hue from radians, instead of degrees.","Convert from a packed <code>u32</code> with specifiable component â€¦","Return the difference or distance between two colors","","","","","Calculate the contrast ratio between two colors.","","","","","","","","","","","","","Calculate a hue if possible.","","","","","","","","","","","","Types for interpolation between multiple colors.","Verify the contrast between two colors satisfies SC 1.4.6 â€¦","Verify the contrast between two colors satisfies SC 1.4.6 â€¦","Verify the contrast between two colors satisfies SC â€¦","Verify the contrast between two colors satisfies SC â€¦","Verify the contrast between two colors satisfies SC â€¦","Verify the contrast between two colors satisfies SC â€¦","Verify the contrast between two colors satisfies SC 1.4.3 â€¦","Verify the contrast between two colors satisfies SC 1.4.3 â€¦","Verify the contrast between two colors satisfies SC â€¦","Verify the contrast between two colors satisfies SC â€¦","The hue of the color, in degrees. Decides if itâ€™s red, â€¦","The hue of the color, in degrees. Decides if itâ€™s red, â€¦","The hue of the color, in degrees. Decides if itâ€™s red, â€¦","The hue of the color, in degrees. Decides if itâ€™s red, â€¦","The hue of the color, in degrees. Decides if itâ€™s red, â€¦","The hue of the color, in degrees. Decides if itâ€™s red, â€¦","h is the hue of the color, in degrees. Decides if itâ€™s â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts <code>self</code> into <code>T</code>, while performing the appropriate â€¦","Convert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert to a <code>(L\\\\*, C\\\\*uv, hÂ°uv, alpha)</code> tuple.","Convert to a <code>(hue, saturation, lightness, alpha)</code> tuple.","Convert to a <code>(L, a, b, alpha)</code> tuple.","Convert to a <code>(hue, whiteness, blackness, alpha)</code> tuple.","Convert to a <code>(L\\\\*, a\\\\*, b\\\\*, alpha)</code> tuple.","Convert to a <code>(X, Y, Z, alpha)</code> tuple.","Convert to u <code>(L\\\\*, u\\\\*, v\\\\*, alpha)</code> tuple.","Convert to a <code>(L, C, h, alpha)</code> tuple.","Convert to a <code>(hue, saturation, value, alpha)</code> tuple.","Convert to a <code>(luma, alpha)</code> tuple.","Convert to a <code>(red, green, blue, alpha)</code> tuple.","Convert to a <code>(hue, saturation, l, alpha)</code> tuple.","Convert to a <code>(L\\\\*, C\\\\*, hÂ°, alpha)</code> tuple.","Convert to a <code>(hue, saturation, lightness)</code> tuple.","Convert to a <code>(hue, saturation, l)</code> tuple.","Convert to a <code>(hue, saturation, value)</code> tuple.","Convert to a <code>(hue, whiteness, blackness)</code> tuple.","Convert to a <code>(L\\\\*, a\\\\*, b\\\\*)</code> tuple.","Convert to a <code>(L\\\\*, C\\\\*, hÂ°)</code> tuple.","Convert to a <code>(L\\\\*, C\\\\*uv, hÂ°uv)</code> tuple.","Convert to a <code>(L\\\\*, u\\\\*, v\\\\*)</code> tuple.","Convert to a <code>(L, a, b)</code> tuple.","Convert to a <code>(L, C, h)</code> tuple.","Convert to a <code>(X, Y, Z)</code> tuple.","Convert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert the color to a different encoding with â€¦","Convert the color to a different encoding with â€¦","Convert into another component type.","Convert into another component type.","Convert the color to linear luminance with transparency.","Convert the color to linear RGB with transparency.","Convert the color to premultiplied alpha.","","Convert to a packed <code>u32</code> with with specifiable component â€¦","Check if the colorâ€™s components are within the expected â€¦","","","","","","","","","","","","","","Decides how light the color will look. 0.0 will be black, â€¦","L* is the lightness of the color. 0.0 gives absolute â€¦","L* is the lightness of the color. 0.0 gives absolute â€¦","L* is the lightness of the color. 0.0 gives absolute â€¦","L* is the lightness of the color. 0.0 gives absolute â€¦","L is the lightness of the color. 0 gives absolute black â€¦","L is the lightness of the color. 0 gives absolute black â€¦","Scale the color towards the maximum lightness by <code>factor</code>, â€¦","","","","","","","","","","","","","","Lighten the color by <code>amount</code>, a value ranging from <code>0.0</code> to â€¦","","","","","","","","","","","","","","Decides how light the color will look. 0.0 will be black, â€¦","Luminance types.","luma (Y) was a measure of the brightness or luminance of â€¦","Return the <code>a</code> value maximum.","Return the <code>a</code> value maximum.","Return the <code>alpha</code> value maximum.","Return the <code>b</code> value maximum.","Return the <code>b</code> value maximum.","Return the <code>blackness</code> value maximum.","Return the <code>chroma</code> value maximum. This value does not â€¦","Return the <code>chroma</code> value maximum.","Return the <code>chroma</code> value maximum.","Return the <code>chroma</code> extended maximum value. This value â€¦","The highest displayable value this component type can â€¦","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>lightness</code> value maximum.","Return the <code>luma</code> value maximum.","Return the <code>saturation</code> value maximum.","Return the <code>saturation</code> value maximum.","Return the <code>saturation</code> value maximum.","Return the <code>u</code> value maximum.","Return the <code>v</code> value maximum.","Return the <code>value</code> value maximum.","Return the <code>whiteness</code> value maximum.","Return the <code>x</code> value maximum.","Return the <code>x</code> value maximum.","Return the <code>y</code> value maximum.","Return the <code>y</code> value maximum.","Return the <code>z</code> value maximum.","Return the <code>a</code> value minimum.","Return the <code>a</code> value minimum.","Return the <code>alpha</code> value minimum.","Return the <code>b</code> value minimum.","Return the <code>b</code> value minimum.","Return the <code>blackness</code> value minimum.","Return the <code>chroma</code> value minimum.","Return the <code>chroma</code> value minimum.","Return the <code>chroma</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>lightness</code> value minimum.","Return the <code>luma</code> value minimum.","Return the <code>saturation</code> value minimum.","Return the <code>saturation</code> value minimum.","Return the <code>saturation</code> value minimum.","Return the <code>u</code> value minimum.","Return the <code>v</code> value minimum.","Return the <code>value</code> value minimum.","Return the <code>whiteness</code> value minimum.","Return the <code>x</code> value minimum.","Return the <code>x</code> value minimum.","Return the <code>y</code> value minimum.","Return the <code>y</code> value minimum.","Return the <code>z</code> value minimum.","Mix the color with an other color, by <code>factor</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A collection of named color constants. Can be toggled â€¦","","","CIE Yxy and transparency with white point D65.","CIE L*u*v* and transparency and white point D65.","HSL and transparency for linear sRGB.","CIE Yxy and transparency with white point D65.","CIE L*C*hÂ° and transparency with white point D65.","Oklab and transparency.","HSLuv and transparency with standard D65 whitepoint.","CIE L*a*b* and transparency and white point D65.","Create a luminance color with transparency.","CIE L*C*uv hÂ°uv and transparency with white point D65.","HWB and transparency for linear sRGB.","Non-linear RGB.","HSV and transparency for linear sRGB.","Oklch and transparency.","HSL for linear sRGB.","HSLuv with standard D65 whitepoint","HSV for linear sRGB.","HWB for linear sRGB.","CIE L*a*b* with white point D65.","CIE L*C*hÂ° with white point D65.","CIE L*C*uv hÂ°uv with white point D65.","CIE L*u*v* with white point D65.","Create an Oklab color.","Create an Oklch color.","CIE XYZ with white point D65.","CIE Yxy with white point D65.","Transforms the color into a fully opaque color with a â€¦","Transforms the color into a fully opaque color with a â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","RGB types, spaces and standards.","Scale the color towards the maximum saturation by <code>factor</code>, â€¦","","","","","","","","Increase the saturation by <code>amount</code>, a value ranging from â€¦","","","","","","","","The colorfulness of the color. 0.0 gives gray scale â€¦","The colorfulness of the color, as a percentage of the â€¦","The colorfulness of the color. 0.0 gives gray scale â€¦","Return a new copy of <code>self</code>, but with the hue shifted by â€¦","","","","","","","","","Splits the color into separate color and transparency â€¦","","","","","","","","","","","","","","Split RGBA components into a <code>(u8, u8, u8, u8)</code> tuple.","The white point and RGB primaries this color is adapted â€¦","The white point and RGB primaries this color is adapted â€¦","The white point and RGB primaries this color is adapted â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","","","","","","","","","","","","","","","","","","Convert the hue to positive degrees, in the range <code>[0, 360)</code>â€¦","Convert the hue to positive degrees, in the range <code>[0, 360)</code>â€¦","Convert the hue to positive degrees, in the range <code>[0, 360)</code>â€¦","Convert the hue to positive degrees, in the range <code>[0, 360)</code>â€¦","Convert the hue to positive radians, in the range <code>[0, 2Ï€)</code>â€¦","Convert the hue to positive radians, in the range <code>[0, 2Ï€)</code>â€¦","Convert the hue to positive radians, in the range <code>[0, 2Ï€)</code>â€¦","Convert the hue to positive radians, in the range <code>[0, 2Ï€)</code>â€¦","Convert the hue to radians, in the range <code>(-Ï€, Ï€]</code>.","Convert the hue to radians, in the range <code>(-Ï€, Ï€]</code>.","Convert the hue to radians, in the range <code>(-Ï€, Ï€]</code>.","Convert the hue to radians, in the range <code>(-Ï€, Ï€]</code>.","Get the internal representation, without normalizing it.","Get the internal representation, without normalizing it.","Get the internal representation, without normalizing it.","Get the internal representation, without normalizing it.","Get the internal representation as radians, without â€¦","Get the internal representation as radians, without â€¦","Get the internal representation as radians, without â€¦","Get the internal representation as radians, without â€¦","Transforms the color into a fully transparent color. If â€¦","Transforms the color into a fully transparent color. If â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The range of valid u* varies depending on the values of L*â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The range of valid v* varies depending on the values of L*â€¦","Decides how bright the color will look. 0.0 will be â€¦","Defines the tristimulus values of the CIE Illuminants.","The white point and RGB primaries this color is adapted â€¦","The white point associated with the colorâ€™s illuminant â€¦","The white point associated with the colorâ€™s illuminant â€¦","The white point associated with the colorâ€™s illuminant â€¦","The white point associated with the colorâ€™s illuminant â€¦","The white point associated with the colorâ€™s illuminant â€¦","The white point associated with the colorâ€™s illuminant â€¦","The whiteness of the color. It specifies the amount white â€¦","Transforms the color into a transparent color with the â€¦","","","","","","","","","","","","","","Return a new copy of <code>self</code>, but with a specific hue.","","","","","","","","","Linear HWB and transparency.","Linear HSL and transparency.","CIE L*u*v* and transparency.","CIE L*C*hÂ° and transparency.","CIE XYZ and transparency.","Linear HSV and transparency.","HSLuv and transparency.","CIE L*a*b* and transparency.","CIE L*C*uv hÂ°uv and transparency.","CIE Yxy and transparency.","Linear HSL.","HSLuv with custom whitepoint.","Linear HSV.","Linear HWB.","CIE L*a*b*.","CIE L*C*hÂ°.","CIE L*C*uv hÂ°uv","CIE L*u*v*.","CIE XYZ.","CIE Yxy.","Removes the transparency from the color. If <code>Self::Color</code> â€¦","","","","","","","","","","","","","","X is the scale of what can be seen as a response curve â€¦","x chromaticity co-ordinate derived from XYZ color space â€¦","Y is the luminance of the color, where 0.0 is black and â€¦","y chromaticity co-ordinate derived from XYZ color space â€¦","Z is the scale of what can be seen as the blue â€¦","Add the source and destination, according to â€¦","A trait for colors that can be blended together.","A trait for custom blend functions.","The core color type. Typically <code>Self</code> for color types â€¦","The destination alpha.","The destination color, or alpha.","A blending equation.","A pair of blending equations and corresponding parameters.","Create a color where each component is the largest of â€¦","Create a color where each component is the smallest of â€¦","A simple 1.","One minus the destination alpha.","One minus the destination color, or alpha.","One minus the source alpha.","One minus the source color, or alpha.","A blending parameter.","A pair of source and destination parameters.","Premultiplied alpha wrapper.","Subtract the source from the destination, according to â€¦","The source alpha.","The source color, or alpha.","Subtract the destination from the source, according to â€¦","A simple 0.","","","","","","","","","","","The transparency component. 0.0 is fully transparent and â€¦","The equation for the alpha component.","The parameters for the alpha component.","Apply this blend function to a pair of colors.","","","","Place <code>self</code> over only the visible parts of <code>other</code>.","Place <code>self</code> over only the visible parts of <code>other</code>.","Place <code>self</code> over only the visible parts of <code>other</code>.","Blend self, as the source color, with <code>destination</code>, using â€¦","Blend self, as the source color, with <code>destination</code>, using â€¦","Blend self, as the source color, with <code>destination</code>, using â€¦","","","","","","","","","","","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is â€¦","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is â€¦","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is â€¦","","","","","","","","","","","The premultiplied color components (â€¦","The equation for the color components.","The parameters for the color components.","","","Return the darkest parts of <code>self</code> and <code>other</code>.","Return the darkest parts of <code>self</code> and <code>other</code>.","Return the darkest parts of <code>self</code> and <code>other</code>.","","","","","","","The destination parameter.","Return the absolute difference between <code>self</code> and <code>other</code>. Itâ€¦","Return the absolute difference between <code>self</code> and <code>other</code>. Itâ€¦","Return the absolute difference between <code>self</code> and <code>other</code>. Itâ€¦","","","","","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> isâ€¦","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> isâ€¦","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> isâ€¦","","","","","","Similar to <code>difference</code>, but appears to result in a lower â€¦","Similar to <code>difference</code>, but appears to result in a lower â€¦","Similar to <code>difference</code>, but appears to result in a lower â€¦","","","","","","","","","","","","Create a pair of blending equations, where all the â€¦","Create a pair of additive blending equations with the â€¦","Convert the color from premultiplied alpha.","","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them â€¦","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them â€¦","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them â€¦","Results in the parts of <code>self</code> that overlaps the visible â€¦","Results in the parts of <code>self</code> that overlaps the visible â€¦","Results in the parts of <code>self</code> that overlaps the visible â€¦","","","","","","","","","","","","","","","","Convert the color to premultiplied alpha.","","Return the lightest parts of <code>self</code> and <code>other</code>.","Return the lightest parts of <code>self</code> and <code>other</code>.","Return the lightest parts of <code>self</code> and <code>other</code>.","","","","","","Multiply <code>self</code> with <code>other</code>. This uses the alpha component â€¦","Multiply <code>self</code> with <code>other</code>. This uses the alpha component â€¦","Multiply <code>self</code> with <code>other</code>. This uses the alpha component â€¦","","","Results in the parts of <code>self</code> that lies outside the â€¦","Results in the parts of <code>self</code> that lies outside the â€¦","Results in the parts of <code>self</code> that lies outside the â€¦","Place <code>self</code> over <code>other</code>. This is the good old common alpha â€¦","Place <code>self</code> over <code>other</code>. This is the good old common alpha â€¦","Place <code>self</code> over <code>other</code>. This is the good old common alpha â€¦","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them â€¦","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them â€¦","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them â€¦","Add <code>self</code> and <code>other</code>. This uses the alpha component to â€¦","Add <code>self</code> and <code>other</code>. This uses the alpha component to â€¦","Add <code>self</code> and <code>other</code>. This uses the alpha component to â€¦","","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if itâ€¦","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if itâ€¦","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if itâ€¦","The source parameter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Results in either <code>self</code> or <code>other</code>, where they do not â€¦","Results in either <code>self</code> or <code>other</code>, where they do not â€¦","Results in either <code>self</code> or <code>other</code>, where they do not â€¦","Trait to convert color from one reference white point to â€¦","Trait to convert color with one reference white point â€¦","Bradford chromatic adaptation method","Holds the matrix coefficients for the chromatic â€¦","Chromatic adaptation methods implemented in the library","Generates a conversion matrix to convert the Xyz â€¦","VonKries chromatic adaptation method","XyzScaling chromatic adaptation method","Convert the source color to the destination color using â€¦","Convert the source color to the destination color using â€¦","Convert the source color to the destination color using â€¦","Convert the source color to the destination color using â€¦","","","","","","","","","Generates a 3x3 transformation matrix to convert color â€¦","Get the cone response functions for the chromatic â€¦","","","","","","","","3x3 matrix for the inverse of the cone response domains","3x3 matrix for the cone response domains","","","","","","","","","A trait for converting one color from another, in a â€¦","A trait for unchecked conversion of one color from â€¦","A trait for converting a color into another, in a â€¦","A trait for unchecked conversion of a color into another.","The error type for a color conversion that converted a â€¦","A trait for fallible conversion of one color from another.","A trait for fallible conversion of a color into another.","","","","Consume this error and return the wrapped color","","","","","Convert from T with values clamped to the color defined â€¦","Convert from T. The resulting color might be invalid in â€¦","","Convert into T with values clamped to the color defined â€¦","","Convert into T. The resulting color might be invalid in â€¦","","","","Convert from T, returning ok if the color is inside of â€¦","","Convert into T, returning ok if the color is inside of â€¦","","","A transfer function to and from linear space.","Convert the color component <code>x</code> from linear space.","Gamma encoding.","Convert the color component <code>x</code> into linear space.","Linear encoding","Pixel encodings and pixel format conversion.","The sRGB standard.","Represents <code>2.2f64</code>.","Gamma encoding.","The transfer function for gamma encoded colors.","A type level float constant.","The represented number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A generic standard with linear components.","Linear color component encoding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The guaranteed number of channels in the sequence.","The guaranteed number of channels in the sequence.","The number of color channels.","Represents colors that can be serialized and deserialized â€¦","A contiguous sequence of pixel channels.","A contiguous sequence of pixel channels with a known â€¦","Convert to a mutable pointer.","Convert to a pointer.","Cast as a reference to raw color components.","Cast as a mutable reference to raw color components.","The length of the sequence.","Cast from a reference to raw color components.","Cast from a mutable reference to raw color components.","Convert from a pointer and a length.","Convert from a mutable pointer and a length.","Cast a slice of raw color components to a slice of colors.","Cast a mutable slice of raw color components to a mutable â€¦","Convert into raw color components.","Cast a slice of colors to a slice of raw color components.","Cast a mutable slice of colors to a mutable slice of raw â€¦","The sRGB color space.","","","","","","","","","","","","","","","","","","","","","","Generic trait for floating point numbers","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> â€¦","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in â€¦","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in â€¦","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in â€¦","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and â€¦","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a â€¦","Returns the floating point category of the number. If â€¦","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if theâ€¦","Returns the largest integer less than or equal to a â€¦","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle â€¦","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as â€¦","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or â€¦","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is neither zero, infinite, â€¦","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, â€¦","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, â€¦","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than â€¦","Returns the logarithm of the number with respect to an â€¦","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can â€¦","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this â€¦","Returns the smallest finite value that this type can â€¦","Fused multiply-add. Computes <code>(self * a) + b</code> with only one â€¦","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way â€¦","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the â€¦","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","A linear interpolation between colors.","A domain range for gradient slices.","A slice of a Gradient that limits its domain.","An iterator over interpolated colors.","","","","","","","","","","","","","","","","","","","","","","","","","Get the limits of this gradientâ€™s domain.","Get the limits of this gradient sliceâ€™s domain.","","","","","","","","","","","","","","","Get a color from the gradient. The color of the closest â€¦","Get a color from the gradient slice. The color of the â€¦","","","","","","","","","","","","","","A collection of named gradient constants. Can be toggled â€¦","","Create a gradient of evenly spaced colors with the domain â€¦","","","","","Slice this gradient to limit its domain.","Slice this gradient slice to further limit its domain. â€¦","Take <code>n</code> evenly spaced colors from the gradient, as an â€¦","Take <code>n</code> evenly spaced colors from the gradient slice, as â€¦","","","","","","","","","","","","","","","","","","","","","","Create a gradient of colors with custom spacing and â€¦","New matplotlib colormap by Nathaniel J. Smith, Stefan van â€¦","New matplotlib colormap by Nathaniel J. Smith, Stefan van â€¦","New matplotlib colormap by Nathaniel J. Smith, Stefan van â€¦","New matplotlib colormap by Nathaniel J. Smith, Stefan van â€¦","Gamma 2.2 encoded luminance.","Gamma 2.2 encoded luminance with an alpha component.","Linear luminance.","Linear luminance with an alpha component.","Luminance.","A white point and a transfer function.","Luminance with an alpha component. See the <code>Lumaa</code> â€¦","sRGB encoded luminance.","sRGB encoded luminance with an alpha component.","The transfer function for the luminance component.","The white point of the color space.","","","","","","","","Convert to a raw pixel format.","Convert to a raw pixel format.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from a <code>(luma,)</code> tuple.","Convert luminance from a different encoding.","Convert from another component type.","Convert linear luminance to non-linear luminance.","","","","","","","Convert to a <code>(luma,)</code> tuple.","Convert the color to a different encoding.","Convert into another component type.","Convert the color to linear luminance.","","","","","The lightness of the color. 0.0 is black and 1.0 is white.","Return the <code>luma</code> value maximum.","Return the <code>luma</code> value minimum.","","","","","","Create a luminance color.","","","The kind of RGB standard. sRGB is the default.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a SVG/CSS3 color by name. Can be toggled with the â€¦","Error type for parsing a string of hexadecimal characters â€¦","Gamma 2.2 encoded sRGB.","Gamma 2.2 encoded sRGB with an alpha component.","The hex value was not in a valid 3 or 6 character format.","Linear sRGB.","Linear sRGB with an alpha component.","RGBA color packed into a 32-bit unsigned integer. â€¦","An error occurred while parsing the string into a valid â€¦","Represents the red, green and blue primaries of an RGB â€¦","The primaries of the RGB color space.","Generic RGB.","Splits and combines RGB(A) types with some channel â€¦","A set of primaries and a white point.","An RGB space and a transfer function.","Generic RGB with an alpha component. See the <code>Rgba</code> â€¦","The RGB color space.","Non-linear sRGB.","Non-linear sRGB with an alpha component.","The transfer function for the color components.","The white point of the RGB color space.","","","","","","","","","","Convert to a raw pixel format.","Convert to a raw pixel format.","Primary blue.","The amount of blue light, where 0.0 is no blue light and â€¦","","","","","","","The channel ordering for red, green, blue, and alpha â€¦","Channel orderings for packed RGBA types.","","","","","","","The sRGB color packed into a <code>u32</code>.","Create an RGBA color from a <code>(u8, u8, u8, u8)</code> tuple.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from a <code>(red, green, blue)</code> tuple.","Convert RGB from a different encoding.","Convert from another component type.","Convert linear RGB to non-linear RGB.","","","Convert from a packed <code>u32</code> with specifiable component â€¦","Convert from a packed <code>u32</code> with specifiable component â€¦","","","Primary green.","The amount of green light, where 0.0 is no green light â€¦","","","","","","","","","","","Convert to a <code>(red, green, blue)</code> tuple.","Convert the color to a different encoding.","Convert into another component type.","Convert the color to linear RGB.","","Convert to a packed <code>u32</code> with with specifiable component â€¦","Convert to a packed <code>u32</code> with with specifiable component â€¦","","","","Return the <code>blue</code> value maximum.","Return the <code>green</code> value maximum.","Return the <code>red</code> value maximum.","Return the <code>blue</code> value minimum.","Return the <code>green</code> value minimum.","Return the <code>red</code> value minimum.","","","","","","","Create an RGB color.","Primary red.","The amount of red light, where 0.0 is no red light and â€¦","","","","Split RGBA components into a <code>(u8, u8, u8, u8)</code> tuple.","The kind of RGB standard. sRGB is the default.","","","","","","","","","","","","","","","","","","","","","","","","RGBA color packed in ABGR order.","RGBA color packed in ARGB order.","RGBA color packed in BGRA order.","RGBA color packed in RGBA order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","CIE standard illuminant A","CIE standard illuminant B","CIE standard illuminant C","CIE D series standard illuminant - D50","CIE D series standard illuminant - D50","CIE D series standard illuminant - D55","CIE D series standard illuminant - D55","CIE D series standard illuminant - D65","CIE D series standard illuminant - D65","CIE D series standard illuminant - D75","CIE D series standard illuminant - D75","CIE standard illuminant E","CIE fluorescent illuminant series - F11","CIE fluorescent illuminant series - F2","CIE fluorescent illuminant series - F7","WhitePoint defines the Xyz color co-ordinates for a given â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the Xyz chromaticity co-ordinates for the white point.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,7,8,9,0,0,2,0,0,0,0,0,10,11,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,14,10,17,18,19,21,22,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,12,13,13,14,14,15,15,16,16,10,10,17,17,18,18,19,19,11,11,20,20,21,21,22,22,23,23,24,24,25,25,26,26,12,12,13,13,14,14,15,15,16,16,10,10,17,17,18,18,19,19,11,11,20,20,21,21,22,22,23,23,24,24,25,25,26,26,12,12,13,14,15,16,10,17,18,19,11,20,21,22,12,13,14,15,16,10,17,18,19,11,20,21,22,10,11,16,0,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,27,17,18,20,0,28,12,13,14,15,16,10,17,18,19,11,20,21,22,28,12,13,14,15,16,10,17,18,19,11,20,21,22,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,27,29,9,12,10,19,11,21,22,9,12,10,19,11,21,22,0,0,7,7,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,12,8,8,12,12,10,10,19,19,11,11,21,21,22,22,12,12,10,10,19,19,11,11,21,21,22,22,0,12,13,14,15,16,10,17,18,19,11,20,21,22,23,23,24,24,25,25,26,26,0,12,12,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,30,30,31,32,32,33,34,34,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,14,14,15,15,16,16,10,10,17,17,18,18,19,19,11,11,20,20,21,21,22,22,23,23,23,24,24,24,25,25,25,26,26,26,12,13,14,15,16,10,17,18,19,11,20,21,22,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,35,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,12,36,12,12,12,12,1,12,23,24,25,26,12,4,10,17,11,20,5,13,14,15,16,10,17,18,19,11,20,21,22,3,12,13,14,15,16,10,17,18,19,11,20,0,5,5,5,5,5,5,5,5,5,5,13,14,15,16,17,18,20,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,14,14,15,15,16,16,10,10,17,17,18,18,19,19,11,11,20,20,21,21,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,37,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,14,15,16,10,17,18,19,11,20,21,22,12,12,12,12,12,12,1,12,12,28,12,13,14,15,16,10,17,18,19,11,20,21,22,14,10,17,18,19,11,20,7,12,13,14,15,16,10,17,18,19,11,20,21,22,7,12,13,14,15,16,10,17,18,19,11,20,21,22,13,0,22,10,11,12,10,11,16,17,18,20,17,38,14,10,17,18,19,11,20,13,22,13,14,15,19,19,15,16,21,22,21,22,21,10,11,12,10,11,16,17,18,20,14,10,17,18,19,11,20,13,22,13,14,15,19,19,15,16,21,22,21,22,21,6,12,13,14,15,16,10,17,18,19,11,20,21,22,12,12,10,10,19,19,11,11,21,21,22,22,12,12,10,10,19,19,11,11,21,21,22,22,0,11,20,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,14,15,16,10,17,18,19,11,20,21,22,2,2,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,14,10,17,18,19,21,22,23,24,25,26,0,8,12,13,14,15,17,18,20,8,12,13,14,15,17,18,20,13,14,15,39,12,13,14,15,16,17,18,20,2,12,13,14,15,16,10,17,18,19,11,20,21,22,29,13,15,16,12,12,13,13,14,14,15,15,16,16,10,10,17,17,18,18,19,19,11,11,20,20,21,21,22,22,23,23,24,24,25,25,26,26,12,12,13,13,14,14,15,15,16,16,10,10,17,17,18,18,19,19,11,11,20,20,21,21,22,22,23,23,24,24,25,25,26,26,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,2,2,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,19,12,13,14,15,16,10,17,18,19,11,20,21,22,23,24,25,26,14,10,17,18,19,21,22,23,24,25,26,19,15,0,14,10,17,18,19,21,22,16,2,12,13,14,15,16,10,17,18,19,11,20,21,22,39,12,13,14,15,16,17,18,20,12,12,12,12,12,12,12,12,12,12,13,14,15,16,10,17,18,19,21,22,2,12,13,14,15,16,10,17,18,19,11,20,21,22,21,22,21,22,21,40,0,0,1,41,41,0,0,40,40,41,41,41,41,41,0,0,0,40,41,41,40,41,42,43,40,44,41,42,42,42,42,42,42,43,43,45,43,42,42,1,1,1,1,1,1,43,40,44,41,42,43,40,44,41,42,1,1,1,43,40,44,41,42,43,40,44,41,42,42,43,43,42,42,1,1,1,42,42,42,42,42,42,44,1,1,1,42,42,42,42,1,1,1,43,40,44,41,42,1,1,1,43,40,44,41,42,43,40,44,41,42,42,43,43,1,42,1,1,1,1,1,1,43,40,44,41,42,43,40,44,41,42,43,40,44,41,42,1,42,1,1,1,42,42,42,42,42,1,1,1,43,44,1,1,1,1,1,1,1,1,1,1,1,1,42,1,1,1,1,1,1,44,42,42,42,42,43,40,44,41,42,43,40,44,41,42,43,40,44,41,42,43,40,44,41,42,43,40,44,41,42,42,1,1,1,0,0,46,0,0,0,46,46,47,47,48,48,46,49,46,49,46,49,46,49,50,50,46,46,49,46,49,46,49,49,49,46,49,46,49,46,49,46,49,0,0,0,0,0,0,0,51,51,51,51,51,51,51,51,52,53,51,54,51,55,51,51,51,56,51,57,51,51,0,58,0,58,0,0,0,0,0,0,0,59,60,61,62,60,61,62,60,61,62,60,61,62,60,61,62,60,61,62,60,61,62,60,61,62,61,60,61,62,60,61,62,60,61,62,61,60,61,60,61,62,60,61,62,60,61,62,60,61,62,60,61,62,0,0,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,64,63,64,63,64,63,64,64,63,63,64,63,64,63,64,63,64,63,64,65,65,66,0,0,0,67,67,66,66,67,66,66,67,67,66,66,66,66,66,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,0,0,0,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,70,70,70,71,73,70,71,73,70,71,71,71,72,73,70,70,70,70,70,71,73,71,72,73,70,71,72,73,70,71,72,73,70,72,0,70,71,72,72,70,72,71,73,71,73,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,70,71,0,0,0,0,0,0,0,0,0,0,0,0,0,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,76,0,77,0,0,0,0,0,78,0,0,78,77,79,79,27,79,76,79,79,79,79,79,79,80,79,27,79,76,27,79,76,27,0,79,79,27,79,27,79,27,29,79,79,79,79,79,79,79,79,79,79,27,79,27,79,79,79,76,76,27,27,27,27,79,79,79,79,76,76,76,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,30,79,79,79,80,79,27,79,79,76,27,79,76,27,79,76,79,79,79,79,79,30,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,27,79,80,79,79,76,79,29,79,79,79,79,79,27,79,76,27,79,76,79,27,79,76,27,79,76,27,79,76,79,79,79,0,0,0,0,81,82,83,84,81,82,83,84,81,82,83,84,81,82,83,84,81,82,83,84,81,82,83,84,81,82,83,84,81,82,83,84,81,82,83,84,81,82,83,84,81,82,83,84,81,82,83,84,81,82,83,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["alpha",3]]],[[]],[[["hsl",3]]],[[["hsluv",3]]],[[]],[[["hsv",3]]],[[]],[[["hwb",3]]],[[]],[[]],[[["lab",3]]],[[["lch",3]]],[[]],[[["lchuv",3]]],[[]],[[["luv",3]]],[[]],[[]],[[]],[[["oklch",3]]],[[]],[[]],[[["xyz",3]]],[[["yxy",3]]],[[]],[[["labhue",3]],["labhue",3]],[[],["labhue",3]],[[["luvhue",3]],["luvhue",3]],[[],["luvhue",3]],[[["rgbhue",3]],["rgbhue",3]],[[],["rgbhue",3]],[[["oklabhue",3]],["oklabhue",3]],[[],["oklabhue",3]],[[]],[[["alpha",3]]],[[["hsl",3]]],[[]],[[["hsluv",3]]],[[]],[[]],[[["hsv",3]]],[[]],[[["hwb",3]]],[[]],[[["lab",3]]],[[]],[[["lch",3]]],[[]],[[["lchuv",3]]],[[["luv",3]]],[[]],[[]],[[]],[[["oklch",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[]],[[["labhue",3]]],[[]],[[["luvhue",3]]],[[]],[[["rgbhue",3]]],[[]],[[]],[[["oklabhue",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsluv",3]],[[],["hsv",3]],[[],["hwb",3]],[[],["lab",3]],[[],["lch",3]],[[],["lchuv",3]],[[],["luv",3]],[[]],[[],["oklch",3]],[[],["xyz",3]],[[],["yxy",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsluv",3]],[[],["hsv",3]],[[],["hwb",3]],[[],["lab",3]],[[],["lch",3]],[[],["lchuv",3]],[[],["luv",3]],[[],["oklab",3]],[[],["oklch",3]],[[],["xyz",3]],[[],["yxy",3]],[[],["labhue",3]],[[],["luvhue",3]],[[],["rgbhue",3]],[[],["oklabhue",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],[["rgbstandard",8],["rgba",6],["u8",15]]],[[["fnmut",8]]],[[["alpha",3],["fnmut",8]],["alpha",3]],[[["fnmut",8],["lab",3]],["lab",3]],[[["luv",3],["fnmut",8]],["luv",3]],[[["fnmut",8]]],[[["xyz",3],["fnmut",8]],["xyz",3]],[[["fnmut",8],["yxy",3]],["yxy",3]],[[["fnmut",8]]],[[["fnmut",8]],["alpha",3]],[[["fnmut",8]],["lab",3]],[[["fnmut",8]],["luv",3]],[[["fnmut",8]]],[[["fnmut",8]],["xyz",3]],[[["fnmut",8]],["yxy",3]],[[]],null,[[]],[[]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsluv",3]],[[],["hsv",3]],[[],["hwb",3]],[[],["lab",3]],[[],["lch",3]],[[],["lchuv",3]],[[],["luv",3]],[[]],[[],["oklch",3]],[[],["xyz",3]],[[],["yxy",3]],[[],["labhue",3]],[[],["luvhue",3]],[[],["rgbhue",3]],[[],["oklabhue",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[["alpha",3]]],[[]],[[]],[[["lab",3]]],[[]],[[["luv",3]]],[[]],[[]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[]],[[["alpha",3]]],[[["lab",3]]],[[]],[[]],[[["luv",3]]],[[]],[[]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["oklab",3]],["bool",15]],[[["oklch",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["labhue",3]],["bool",15]],[[["luvhue",3]],["bool",15]],[[],["bool",15]],[[["rgbhue",3]],["bool",15]],[[],["bool",15]],[[["oklabhue",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["packed",3]]],[[["u32",15]]],[[["linsrgb",6]]],[[["linsrgba",6]]],[[["linsrgb",6]]],[[["srgb",6]]],[[["srgb",6]]],[[["srgba",6]]],[[]],[[]],[[]],[[["prealpha",3]],["alpha",3]],[[],["alpha",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["labhue",3]],[[]],[[]],[[]],[[],["luvhue",3]],[[]],[[],["rgbhue",3]],[[]],[[]],[[],["oklabhue",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["xyz",3]]],[[["oklch",3]]],[[["oklab",3]]],[[["hsv",3]]],[[["luv",3]]],[[["yxy",3]]],[[["luma",3]]],[[["alpha",3]]],[[["lchuv",3]]],[[["lch",3]]],[[["lab",3]]],[[["hsl",3]]],[[["hwb",3]]],[[["hsluv",3]]],[[["rgb",3]]],[[["lab",3]]],[[["lch",3]]],[[["luma",3]]],[[["hsl",3]]],[[["hsv",3]]],[[["rgb",3]]],[[["hwb",3]]],[[["lchuv",3]]],[[["hsluv",3]]],[[["alpha",3]]],[[["yxy",3]]],[[["xyz",3]]],[[["oklch",3]]],[[["oklab",3]]],[[["luv",3]]],[[["oklab",3]]],[[["luv",3]]],[[["oklch",3]]],[[["hwb",3]]],[[["lch",3]]],[[["xyz",3]]],[[["hsluv",3]]],[[["yxy",3]]],[[["alpha",3]]],[[["luma",3]]],[[["lchuv",3]]],[[["lab",3]]],[[["hsv",3]]],[[["rgb",3]]],[[["hsl",3]]],[[["lchuv",3]]],[[["hsv",3]]],[[["luma",3]]],[[["hsl",3]]],[[["hsluv",3]]],[[["lab",3]]],[[["lch",3]]],[[["rgb",3]]],[[["luv",3]]],[[["oklab",3]]],[[["oklch",3]]],[[["xyz",3]]],[[["yxy",3]]],[[["alpha",3]]],[[["hwb",3]]],[[["luv",3]]],[[["rgb",3]]],[[["luma",3]]],[[["hsl",3]]],[[["hsluv",3]]],[[["hsv",3]]],[[["hwb",3]]],[[["lchuv",3]]],[[["oklab",3]]],[[["oklch",3]]],[[["yxy",3]]],[[["alpha",3]]],[[["lab",3]]],[[["xyz",3]]],[[["lch",3]]],[[["oklab",3]]],[[["luv",3]]],[[["lchuv",3]]],[[["hwb",3]]],[[["hsv",3]]],[[["hsluv",3]]],[[["hsl",3]]],[[["luma",3]]],[[["rgb",3]]],[[["lab",3]]],[[["oklch",3]]],[[["yxy",3]]],[[["alpha",3]]],[[["lch",3]]],[[["xyz",3]]],[[["lab",3]]],[[["hsluv",3]]],[[["lch",3]]],[[["oklab",3]]],[[["hwb",3]]],[[["hsv",3]]],[[["hsl",3]]],[[["luma",3]]],[[["rgb",3]]],[[["oklch",3]]],[[["xyz",3]]],[[["yxy",3]]],[[["alpha",3]]],[[["lchuv",3]]],[[["luv",3]]],[[["oklab",3]]],[[["lchuv",3]]],[[["lab",3]]],[[["hwb",3]]],[[["hsv",3]]],[[["hsluv",3]]],[[["hsl",3]]],[[["luma",3]]],[[["rgb",3]]],[[["xyz",3]]],[[["lch",3]]],[[["oklch",3]]],[[["yxy",3]]],[[["alpha",3]]],[[["luv",3]]],[[["lab",3],["d65",3]]],[[["xyz",3],["d65",3]]],[[["rgb",3]]],[[["luma",3]]],[[["hsl",3]]],[[["hsluv",3],["d65",3]]],[[["hsv",3]]],[[["hwb",3]]],[[["oklch",3]]],[[["lch",3],["d65",3]]],[[["lchuv",3],["d65",3]]],[[["luv",3],["d65",3]]],[[["yxy",3],["d65",3]]],[[["alpha",3]]],[[]],[[["xyz",3],["d65",3]]],[[["oklab",3]]],[[["rgb",3]]],[[["luma",3]]],[[["hsl",3]]],[[["hsluv",3],["d65",3]]],[[["hsv",3]]],[[["hwb",3]]],[[["lab",3],["d65",3]]],[[["lch",3],["d65",3]]],[[["lchuv",3],["d65",3]]],[[["luv",3],["d65",3]]],[[["yxy",3],["d65",3]]],[[["alpha",3]]],[[["oklch",3]]],[[["lchuv",3]]],[[["oklab",3]]],[[["hsl",3]]],[[["hsluv",3]]],[[["hsv",3]]],[[["hwb",3]]],[[["lch",3]]],[[["luma",3]]],[[["oklch",3]]],[[["alpha",3]]],[[["xyz",3]]],[[["rgb",3]]],[[["yxy",3]]],[[["lab",3]]],[[["luv",3]]],[[["xyz",3]]],[[["yxy",3]]],[[["luma",3]]],[[["alpha",3]]],[[["hsv",3]]],[[["rgb",3]]],[[["hsl",3]]],[[["hsluv",3]]],[[["oklch",3]]],[[["oklab",3]]],[[["lchuv",3]]],[[["lch",3]]],[[["lab",3]]],[[["hwb",3]]],[[["luv",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["labhue",3]],[[],["luvhue",3]],[[],["rgbhue",3]],[[],["oklabhue",3]],[[["alpha",3],["rgb",3]]],[[["luma",3],["alpha",3]],[["luma",3],["alpha",3]]],[[["f64",15]]],[[["luma",3],["alpha",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["luma",3]],[["luma",3],["alpha",3]]],[[["prealpha",3]]],[[["prealpha",3]],["alpha",3]],[[],["labhue",3]],[[],["luvhue",3]],[[],["rgbhue",3]],[[],["oklabhue",3]],[[["u32",15]]],[[]],[[["lab",3]]],[[["lch",3]]],[[]],[[["oklch",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["rgbhue",3]]],[[],[["option",4],["luvhue",3]]],[[],[["option",4],["rgbhue",3]]],[[],[["option",4],["rgbhue",3]]],[[],[["labhue",3],["option",4]]],[[],[["labhue",3],["option",4]]],[[],[["option",4],["luvhue",3]]],[[],[["option",4],["luvhue",3]]],[[],[["oklabhue",3],["option",4]]],[[],[["oklabhue",3],["option",4]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["f32",15]],[[],["f64",15]],[[],["f32",15]],[[]],[[],["f64",15]],[[]],[[],["f32",15]],[[],["f32",15]],[[]],[[],["f64",15]],[[],["f32",15]],[[],["f32",15]],[[]],[[],["f64",15]],[[],["f32",15]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["alpha",3],["rgb",3]]],[[],[["luma",3],["alpha",3]]],[[],[["luma",3],["alpha",3]]],[[],[["alpha",3],["rgb",3]]],[[],[["alpha",3],["luma",3]]],[[],[["alpha",3],["rgb",3]]],[[],["prealpha",3]],[[],["prealpha",3]],[[],["u32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,[[]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsluv",3]],[[],["hsv",3]],[[],["hwb",3]],[[],["lab",3]],[[],["lch",3]],[[],["lchuv",3]],[[],["luv",3]],[[]],[[],["oklch",3]],[[],["xyz",3]],[[],["yxy",3]],[[]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsluv",3]],[[],["hsv",3]],[[],["hwb",3]],[[],["lab",3]],[[],["lch",3]],[[],["lchuv",3]],[[],["luv",3]],[[]],[[],["oklch",3]],[[],["xyz",3]],[[],["yxy",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["alpha",3]],["alpha",3]],[[["hsl",3]],["hsl",3]],[[["hsluv",3]],["hsluv",3]],[[["hsv",3]],["hsv",3]],[[["hwb",3]],["hwb",3]],[[["lab",3]],["lab",3]],[[["lch",3]],["lch",3]],[[["lchuv",3]],["lchuv",3]],[[["luv",3]],["luv",3]],[[]],[[["oklch",3]],["oklch",3]],[[["xyz",3]],["xyz",3]],[[["yxy",3]],["yxy",3]],[[["alpha",3]]],[[]],[[["lab",3]]],[[]],[[["luv",3]]],[[]],[[]],[[]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[["alpha",3]]],[[]],[[]],[[["lab",3]]],[[["luv",3]]],[[]],[[]],[[]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],null,[[["oklab",3]],["bool",15]],[[["oklch",3]],["bool",15]],[[]],[[]],[[["rgbhue",3],["into",8]]],[[]],[[["labhue",3],["into",8]]],[[]],[[["luvhue",3],["into",8]]],[[]],[[]],[[["luvhue",3],["into",8]]],[[["rgbhue",3],["into",8]]],[[]],[[["rgbhue",3],["into",8]]],[[["oklabhue",3],["into",8]]],[[["rgbhue",3],["into",8]],[["hsl",3],["srgb",3]]],[[["luvhue",3],["into",8]],[["hsluv",3],["d65",3]]],[[["rgbhue",3],["into",8]],[["srgb",3],["hsv",3]]],[[["rgbhue",3],["into",8]],[["srgb",3],["hwb",3]]],[[],[["lab",3],["d65",3]]],[[["labhue",3],["into",8]],[["lch",3],["d65",3]]],[[["luvhue",3],["into",8]],[["lchuv",3],["d65",3]]],[[],[["luv",3],["d65",3]]],[[]],[[["oklabhue",3],["into",8]],["oklch",3]],[[],[["xyz",3],["d65",3]]],[[],[["yxy",3],["d65",3]]],[[]],[[]],[[["alpha",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsluv",3]],[[],["hsv",3]],[[],["lch",3]],[[],["lchuv",3]],[[],["oklch",3]],[[]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsluv",3]],[[],["hsv",3]],[[],["lch",3]],[[],["lchuv",3]],[[],["oklch",3]],null,null,null,[[["into",8]]],[[["into",8]],["alpha",3]],[[["into",8]],["hsl",3]],[[["into",8]],["hsluv",3]],[[["into",8]],["hsv",3]],[[["into",8]],["hwb",3]],[[["into",8]],["lch",3]],[[["into",8]],["lchuv",3]],[[["into",8]],["oklch",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rgbstandard",8],["rgba",6],["u8",15]]],null,null,null,[[]],[[["alpha",3]]],[[["hsl",3]]],[[]],[[]],[[["hsluv",3]]],[[]],[[["hsv",3]]],[[]],[[["hwb",3]]],[[]],[[["lab",3]]],[[["lch",3]]],[[]],[[["lchuv",3]]],[[]],[[["luv",3]]],[[]],[[]],[[]],[[["oklch",3]]],[[]],[[]],[[["xyz",3]]],[[["yxy",3]]],[[]],[[],["labhue",3]],[[["labhue",3]],["labhue",3]],[[["luvhue",3]],["luvhue",3]],[[],["luvhue",3]],[[["rgbhue",3]],["rgbhue",3]],[[],["rgbhue",3]],[[],["oklabhue",3]],[[["oklabhue",3]],["oklabhue",3]],[[]],[[["alpha",3]]],[[["hsl",3]]],[[]],[[["hsluv",3]]],[[]],[[]],[[["hsv",3]]],[[["hwb",3]]],[[]],[[["lab",3]]],[[]],[[]],[[["lch",3]]],[[]],[[["lchuv",3]]],[[]],[[["luv",3]]],[[]],[[]],[[["oklch",3]]],[[]],[[["xyz",3]]],[[]],[[]],[[["yxy",3]]],[[["labhue",3]]],[[]],[[]],[[["luvhue",3]]],[[]],[[["rgbhue",3]]],[[["oklabhue",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["u32",15],["alpha",3]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["into",8]]],[[["into",8]],["alpha",3]],[[["into",8]],["hsl",3]],[[["into",8]],["hsluv",3]],[[["into",8]],["hsv",3]],[[["into",8]],["hwb",3]],[[["into",8]],["lch",3]],[[["into",8]],["lchuv",3]],[[["into",8]],["oklch",3]],[[["rgbhue",3],["into",8]]],[[["rgbhue",3],["into",8]]],[[]],[[["labhue",3],["into",8]]],[[]],[[["rgbhue",3],["into",8]]],[[["luvhue",3],["into",8]]],[[]],[[["luvhue",3],["into",8]]],[[]],[[["rgbhue",3],["into",8]],["hsl",3]],[[["luvhue",3],["into",8]],["hsluv",3]],[[["rgbhue",3],["into",8]],["hsv",3]],[[["rgbhue",3],["into",8]],["hwb",3]],[[],["lab",3]],[[["labhue",3],["into",8]],["lch",3]],[[["luvhue",3],["into",8]],["lchuv",3]],[[],["luv",3]],[[],["xyz",3]],[[],["yxy",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["prealpha",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["prealpha",3]]],[[["prealpha",3]]],[[]],null,null,null,[[["prealpha",3]],["prealpha",3]],[[["prealpha",3]],["prealpha",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["equations",3]],[[],["equation",4]],[[],["parameters",3]],[[],["parameter",4]],[[],["prealpha",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["fnmut",8],["prealpha",3]],["prealpha",3]],[[["fnmut",8]],["prealpha",3]],[[]],[[]],[[]],[[],["prealpha",3]],[[]],[[]],[[],["u32",15]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["prealpha",3]]],[[]],[[["prealpha",3]]],[[]],[[]],[[]],[[["equations",3]],["bool",15]],[[["equation",4]],["bool",15]],[[["parameters",3]],["bool",15]],[[["parameter",4]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["alpha",3]],["prealpha",3]],[[["equation",4]],["equations",3]],[[["parameter",4]],["equations",3]],[[["prealpha",3]]],[[["prealpha",3]],["prealpha",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["prealpha",3]],[[],["prealpha",3]],[[]],[[]],[[]],[[["prealpha",3]],["prealpha",3]],[[]],[[["prealpha",3]]],[[]],[[["prealpha",3]]],[[]],[[]],[[]],[[["equations",3]],["bool",15]],[[["parameters",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["prealpha",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[["prealpha",3]]],[[]],[[["prealpha",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15],["prealpha",3]],["bool",15]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[["transformmatrix",8]]],[[]],[[["transformmatrix",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mat3",6]],[[],["coneresponsematrices",3]],[[],["coneresponsematrices",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["str",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],null,[[["fromf64",8],["float",8]],[["fromf64",8],["float",8]]],null,[[["fromf64",8],["float",8]],[["fromf64",8],["float",8]]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["gamma",3]],[[],["gammafn",3]],[[],["f2p2",3]],[[]],[[]],[[]],[[["gamma",3]],["bool",15]],[[["gammafn",3]],["bool",15]],[[["f2p2",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["fromf64",8],["float",8]],[["fromf64",8],["float",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fromf64",8],["float",8]],[["fromf64",8],["float",8]]],[[["gamma",3]],["bool",15]],[[["gammafn",3]],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["linear",3]],[[],["linearfn",3]],[[]],[[]],[[["linear",3]],["bool",15]],[[["linearfn",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["float",8]],["float",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["float",8]],["float",8]],[[["linear",3]],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["rawpixelsized",8]],[[]],[[]],null,[[]],[[],[["floatcomponent",8],["yxy",3],["whitepoint",8]]],[[]],[[]],[[],["srgb",3]],[[]],[[["srgb",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["fromf64",8],["float",8]],[["fromf64",8],["float",8]]],[[],[["floatcomponent",8],["yxy",3],["whitepoint",8]]],[[]],[[]],[[]],[[["fromf64",8],["float",8]],[["fromf64",8],["float",8]]],[[],[["floatcomponent",8],["yxy",3],["whitepoint",8]]],[[]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["gradient",3]],[[],["take",3]],[[],["slice",3]],[[],["range",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[]],[[["range",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rangefull",3]],["range",3]],[[["rangeto",3]],["range",3]],[[["rangefrom",3]],["range",3]],[[["range",3]],["range",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["range",3]],["bool",15]],[[["intoiterator",8]],["gradient",3]],[[],["option",4]],[[],["option",4]],[[["range",3]],["bool",15]],[[]],[[["into",8],["range",3]],["slice",3]],[[["into",8],["range",3]],["slice",3]],[[["usize",15]],["take",3]],[[["usize",15]],["take",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["range",3],["u32",15]],["bool",15]],[[],["gradient",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[["luma",3]]],[[]],[[["luma",3]]],[[]],[[]],[[]],[[]],[[],["luma",3]],[[]],[[],["luma",3]],[[]],[[["fnmut",8],["luma",3]],["luma",3]],[[["fnmut",8]],["luma",3]],[[],["luma",3]],[[]],[[]],[[],["u32",15]],[[["luma",3]]],[[]],[[["luma",3]]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["xyz",3]]],[[["oklch",3]]],[[["rgb",3]]],[[["hsl",3]]],[[["hsluv",3]]],[[["hsv",3]]],[[["hwb",3]]],[[["lch",3]]],[[["lchuv",3]]],[[["luv",3]]],[[["luma",3]]],[[["alpha",3]]],[[["lab",3]]],[[["oklab",3]]],[[["yxy",3]]],[[]],[[["lumastandard",8],["luma",3]],["luma",3]],[[["luma",3]]],[[["luma",3],["linear",3]],["luma",3]],[[["prealpha",3],["luma",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["lumastandard",8],["luma",3]]],[[],["luma",3]],[[],[["luma",3],["linear",3]]],[[],[["prealpha",3],["luma",3]]],[[],["bool",15]],[[],["luma",3]],[[],["luma",3]],null,[[]],[[]],[[["luma",3]],["luma",3]],[[]],[[["luma",3]]],[[["luma",3]]],[[]],[[],["luma",3]],[[],["bool",15]],[[]],null,[[["luma",3]]],[[]],[[["luma",3]]],[[]],[[]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],[[["u32",15]],["bool",15]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],[["option",4],["srgb",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[["rgb",3]]],[[]],[[["rgb",3]]],[[]],[[]],[[]],[[],[["floatcomponent",8],["yxy",3],["whitepoint",8]]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["rgb",3]],[[]],[[]],[[],["rgb",3]],[[]],[[]],null,[[],[["rgbstandard",8],["rgba",6],["u8",15]]],[[["rgb",3],["fnmut",8]],["rgb",3]],[[["fnmut",8]],["rgb",3]],[[],["rgb",3]],[[]],[[]],[[],["u32",15]],[[["rgb",3]]],[[]],[[["rgb",3]]],[[]],[[["packed",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]]],[[["rgb",3],["u8",15]]],[[["rgba",6],["u8",15]]],[[]],[[["packed",3]]],[[["u32",15]]],[[]],[[]],[[["str",15]],["fromhexerror",4]],[[["parseinterror",3]],["fromhexerror",4]],[[]],[[["hsluv",3]]],[[["luv",3]]],[[["xyz",3]]],[[["oklab",3]]],[[["luma",3]]],[[["hsl",3]]],[[["lab",3]]],[[["lch",3]]],[[["hwb",3]]],[[["rgb",3]]],[[["lchuv",3]]],[[["alpha",3]]],[[["yxy",3]]],[[["hsv",3]]],[[["oklch",3]]],[[]],[[["rgb",3],["rgbstandard",8]],["rgb",3]],[[["rgb",3]]],[[["rgb",3],["linear",3]],["rgb",3]],[[["prealpha",3],["rgb",3]]],[[["str",15]],["result",4]],[[["u32",15]]],[[["u32",15]]],[[]],[[],[["option",4],["rgbhue",3]]],[[],[["floatcomponent",8],["yxy",3],["whitepoint",8]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["rgb",3],["rgbstandard",8]]],[[],["rgb",3]],[[],[["rgb",3],["linear",3]]],[[],[["rgb",3],["prealpha",3]]],[[],["u32",15]],[[],["u32",15]],[[],["bool",15]],[[],["rgb",3]],[[],["rgb",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rgb",3]],["rgb",3]],[[]],[[["rgb",3]]],[[["rgb",3]]],[[]],[[["packed",3]],["bool",15]],[[],["rgb",3]],[[],[["floatcomponent",8],["yxy",3],["whitepoint",8]]],null,[[],["bool",15]],[[],[["option",4],["error",8]]],[[]],[[["rgbstandard",8],["rgba",6],["u8",15]]],null,[[]],[[["rgb",3]]],[[["rgb",3]]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]],["bool",15]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["rgba",6],["rgbstandard",8],["u8",15]]],[[],[["rgba",6],["rgbstandard",8],["u8",15]]],[[],[["rgba",6],["rgbstandard",8],["u8",15]]],[[],[["rgba",6],["rgbstandard",8],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rgba",6],["rgbstandard",8],["u8",15]]],[[["rgba",6],["rgbstandard",8],["u8",15]]],[[["rgba",6],["rgbstandard",8],["u8",15]]],[[["rgba",6],["rgbstandard",8],["u8",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["a",3]],[[],["b",3]],[[],["c",3]],[[],["d50",3]],[[],["d55",3]],[[],["d65",3]],[[],["d75",3]],[[],["e",3]],[[],["f2",3]],[[],["f7",3]],[[],["f11",3]],[[],["d50degree10",3]],[[],["d55degree10",3]],[[],["d65degree10",3]],[[],["d75degree10",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["a",3]],["bool",15]],[[["b",3]],["bool",15]],[[["c",3]],["bool",15]],[[["d50",3]],["bool",15]],[[["d55",3]],["bool",15]],[[["d65",3]],["bool",15]],[[["d75",3]],["bool",15]],[[["e",3]],["bool",15]],[[["f2",3]],["bool",15]],[[["f7",3]],["bool",15]],[[["f11",3]],["bool",15]],[[["d50degree10",3]],["bool",15]],[[["d55degree10",3]],["bool",15]],[[["d65degree10",3]],["bool",15]],[[["d75degree10",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[],[["xyz",3],["floatcomponent",8],["whitepoint",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],[["outofbounds",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[8,"Blend"],[8,"WithAlpha"],[8,"GetHue"],[8,"ColorDifference"],[8,"RelativeContrast"],[8,"Mix"],[8,"Shade"],[8,"Saturate"],[8,"ComponentWise"],[3,"Lab"],[3,"Oklab"],[3,"Alpha"],[3,"Hsl"],[3,"Hsluv"],[3,"Hsv"],[3,"Hwb"],[3,"Lch"],[3,"Lchuv"],[3,"Luv"],[3,"Oklch"],[3,"Xyz"],[3,"Yxy"],[3,"LabHue"],[3,"LuvHue"],[3,"RgbHue"],[3,"OklabHue"],[3,"Packed"],[8,"Clamp"],[8,"RgbChannels"],[6,"Rgba"],[6,"Srgb"],[6,"Srgba"],[6,"LinSrgb"],[6,"LinSrgba"],[8,"FromComponent"],[8,"FromF64"],[8,"IntoComponent"],[8,"Component"],[8,"Hue"],[4,"Equation"],[4,"Parameter"],[3,"PreAlpha"],[3,"Equations"],[3,"Parameters"],[8,"BlendFunction"],[4,"Method"],[8,"AdaptFrom"],[8,"AdaptInto"],[3,"ConeResponseMatrices"],[8,"TransformMatrix"],[3,"OutOfBounds"],[8,"FromColor"],[8,"FromColorUnclamped"],[8,"IntoColor"],[8,"IntoColorUnclamped"],[8,"TryFromColor"],[8,"TryIntoColor"],[8,"TransferFn"],[8,"Number"],[3,"Gamma"],[3,"GammaFn"],[3,"F2p2"],[3,"Linear"],[3,"LinearFn"],[8,"RawPixelSized"],[8,"Pixel"],[8,"RawPixel"],[3,"Srgb"],[8,"Float"],[3,"Range"],[3,"Gradient"],[3,"Take"],[3,"Slice"],[8,"LumaStandard"],[3,"Luma"],[4,"FromHexError"],[8,"RgbSpace"],[8,"RgbStandard"],[3,"Rgb"],[8,"Primaries"],[3,"Abgr"],[3,"Argb"],[3,"Bgra"],[3,"Rgba"],[3,"A"],[3,"B"],[3,"C"],[3,"D50"],[3,"D55"],[3,"D65"],[3,"D75"],[3,"E"],[3,"F2"],[3,"F7"],[3,"F11"],[3,"D50Degree10"],[3,"D55Degree10"],[3,"D65Degree10"],[3,"D75Degree10"],[8,"WhitePoint"]],"a":{"gray":[2080],"grey":[2080],"hsb":[16],"linear":[2078,2079,2330,2331],"wcag":[42],"xyy":[58]}}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};